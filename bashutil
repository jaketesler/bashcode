#!/bin/bash

##  'bashutil' command for bash
##  Written by Jake Tesler
##  v1.5
##--------------------

VERSION=1.5
echoUnderline=`tput smul`
echoNoUnderline=`tput rmul`
echoBold=`tput bold`
echoNoBold=`tput sgr0`

bashversion=`echo $BASH_VERSION | cut -d "." -f1`
#useful bash utility

function Leave {
	echo -e
	echo "${echoNoBold}${echoNoUnderline}"
	exit
}
trap Leave INT

function ReturnToMenu {
	echo -e "_________________________________________________\n\c"
	PrintMenuOptions;
	MainSelection;
}

function fanset()
{
	speed_ok=false;
	max_sp=$(smc -k F0Mx -r | cut -d ' ' -f 7)
	min_sp=$(smc -k F0Mn -r | cut -d ' ' -f 7)

	echo -e "Please enter target fan speed: \c"
	read newspeed

	while [ [$speed_ok] ]; do
		if [[ $speed -gt $max_sp ]]; then
			echo -e "\nERROR: selected speed too high (max speed = $max_sp""rpm)"
			echo -e "Please enter target fan speed ['r' to return to menu]: \c"
			read speed

			if [[ $speed == 'r' ]]; then return;
			elif [[ -z $speed ]]; then speed=$(expr $max_sp + 1);
			elif [[ $speed =~ ^-?[0-9]+$ ]]; then true; #check for valid value (if number)
			else speed=$(expr $max_sp + 1);
			fi

		elif [[ $speed -lt $min_sp ]]; then
			echo -e "\nERROR: selected speed too low (min speed = $min_sp""rpm)"
			echo -e "Please enter target fan speed ['r' to return to menu]: \c"
			read speed
			
			if [[ $speed == 'r' ]]; then return;
			elif [[ -z $speed ]]; then speed=$(expr $min_sp - 1);
			elif [[ $speed =~ ^-?[0-9]+$ ]]; then true; #check for valid value (if number)
			else speed=$(expr $min_sp - 1);
			fi

		else speed_ok=true; fi
	done
	unset speed_ok max_sp min_sp
	newspeed=$(python -c "print hex($newspeed << 2)")
	smc -k F0Tg -w $newspeed
	smc -k F1Tg -w $newspeed
	echo -e "\n""Fan Speed set to $newspeed"
	echo -e
	unset newspeed
}


function FanPgrm {
	echo -e "${echoUnderline}Fan Control${echoNoUnderline}\n"
	fandone=1;
	echo -e "Would you like to set manual speed [1], view the current speed [2], or [r]eturn to menu? [1/2/r]: \c"
	read fanoption
	case $fanoption in
		1)	#Set target fan speed (RPM)
			fanset
		2) 	#view current speed
			smc -f
			echo -e
			;;
		r)
			ReturnToMenu;
			;;
		*)
			echo -e "Sorry, that isn't one of the choices."
			fandone=0
			;;
	esac
	unset fanoption
}

function TodayInHistory {
	echo -e "${echoUnderline}Today In History${echoNoUnderline}\n"
	echo -e "Please enter Month/day (e.g. 12/31) [Leave blank for today]: \c"
	read whatdate
	if [ -z "$whatdate" ]; then
		whatdate=$(date "+%m/%d")
	elif [ "$whatdate" == "all" ]; then
		echo -e "\nEvery Day in History:"
		cat "/usr/share/calendar/calendar.history"
		cat /usr/share/calendar/calendar.birthday
		cat /usr/share/calendar/calendar.computer
		cat /usr/share/calendar/calendar.lotr
		cat /usr/share/calendar/calendar.music
		echo -e "\nAll Holidays:"
		cat /usr/share/calendar/calendar.holiday
		exit
	fi
	echo -e "\nToday in History:"
	cat "/usr/share/calendar/calendar.history" | grep $whatdate
	cat /usr/share/calendar/calendar.birthday | grep $whatdate
	cat /usr/share/calendar/calendar.computer | grep $whatdate
	cat /usr/share/calendar/calendar.lotr | grep $whatdate
	cat /usr/share/calendar/calendar.music | grep $whatdate
	echo -e "\nHolidays today:"
	curholiday="cat /usr/share/calendar/calendar.holiday | grep $whatdate"
	if [ -z "$(cat /usr/share/calendar/calendar.holiday | grep $whatdate)" ]; then { echo -e "NONE"; }
	else { cat /usr/share/calendar/calendar.holiday | grep $whatdate; }
	fi
	echo -e
	unset whatdate; unset curholiday;
}

function BrightnessFn {
	brightfire=0
	echo -e "${echoUnderline}Brightness Control Options${echoNoUnderline}\n"
	command -v brightness >/dev/null 2>&1 || brightfire=1 >&2  ##tests if brightness exists
	if [ $brightfire == 1 ]; then
		{ echo -e "I require ${echoBold}brightness${echoNoBold} but it's not installed. \nPlease install brightness from GitHub and retry. \n${echoBold}Aborting.${echoNoBold}"; sleep 3; ReturnToMenu; }
	else {
		while [ -z $brightchoice ]; do {
			echo -e "Please choose: [a]djust brightness for this display (0.000-1.000), [d]isplay current settings [aD]: \c"
			read brightchoice
		}
		done
		case $brightchoice in
			a)
				echo -e

				;;
			*) ##d or anything else
				while [ -z $brightdisplaychoice ]; do {
					echo -e "Please choose: [n]ormal info or [a]dvanced info [aN]: \c"
					read brightdisplaychoice
				}
				done
				case $brightdisplaychoice in
					#n) brightness -l ;;
					a) brightness -l -v ;;
					*) brightness -l ;; ##n or anything else
				esac
				unset brightdisplaychoice
				;;
			#*)
				#;;
		esac
		unset brightchoice
	}
	fi
	unset brightfire
}


function PrintMenuOptions {
	echo -e "
${echoBold}Bashutil Main Menu${echoNoBold}
-------------------------------

[1] X-Rename a bunch of files (not working)
[2] Make a banner (*text)
[3] Today in History
[4] Infinite Text
[5] Kernel info
[6] X-The Silly Stupid Song
[7] X-Fun with Dialogs
[8] dd Updater
[9] Fan Control
[10] LCD Brightness Control (must have 'brightness' utility installed)
[11] Test if a file is executable
[99] Help with these commands
[q] Quit\
"
}

function PrintHelp { 
	echo -e "
Bashutil is (a beta of) the entire Bashcode
series of programs/scripts, all rolled into a single utility.
Additionally, it serves as a \"repository\", of sorts, 
for a variety of useful bash code snippets.
I often find myself needing small snippets of code. For example, 
if I'm looking for to use a command a certain way 
(with plenty of parameters), 
or if I forget the correct syntax of a certain loop, etc., 
this will serve as a base for me to find all of those snippets. 
I intend to use a variety of different forms of commands in this utility's 
source code to get as vast an expanse as possible (for future referencing). 
I hope the source for 'bashutil' helps you as much as the utility itself!"; }

function PrintDetailedHelp {
	echo -e "
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
----------------------------------------------------------------------
Individual Command Help:

[2]	Banner: Displays a large banner. Usage- (text*).
[3]	Today in History: Displays events in history that happened on (specified) day. [Type 'all' to see all events.]
[4]
[5]
[6]
[7]
[8]
[9]
[10]	-m changes the brightness of the main display; -d changes brightness of whatever display number/ID you provide. -l -v dumps display attributes.
[11]
[99]	This help.
[q]	Quit to command prompt (you can also type 'quit' or 'exit').
----------------------------------------------------------------------
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
}

function MainSelection {
	echo -en "Please choose an option: ${echoUnderline}"
	read choice
	echo -e "${echoNoUnderline}- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n"
	case $choice in 
	
		1)
			echo -e "${echoUnderline}File Extension Renamer${echoNoUnderline}\n"
			while [ -z $mvdirectory ]; do {
				if [ $bashversion -ge 4 ]; then { ls --color=always; }
				else { ls; }
				fi
				read -p "Please choose a directory: " -e mvdirectory
			} done
			echo -e $mvdirectory
			cd $mvdirectory
			#read -p "Please choose a file series: " -e filename
			read -p "Please input old extension (omit the dot, e.g. jpg instead of .jpg): " -e extension
			read -p "Please input the new extension: " -e newextension
			#find . -name '*.$extension' -type f | while read NAME ; do mv "${NAME}" "${NAME%.$newextension}" ; done
			find . -iname "*.${extension}" -exec "mv \"$0\" \"${0%.${extension}}.${newextension}\"" {}
			unset mvdirectory; unset extension; unset newextension; ;;
		2)
			echo -e "${echoUnderline}Make a Banner${echoNoUnderline}\n"
			echo -en "Please insert text: "
			read bnr
			banner $bnr
			unset bnr
			;;
		
		3)	TodayInHistory; ;;
		
		4)
			echo -e "Please enter text to infinitely print to stdout (ctrl-c to exit): \c"
			read txt
			yes $txt
			;;

		5)	uname -a ;;
		
		6)	
			echo -e "${echoUnderline}The Silly Song${echoNoUnderline}\n"
			osascript -e "say \"oh This is a silly song stupid song silly song this is the stupidest song ive ever ever heard
			So why keep you listening listening listening while you are supposed to work to work to work to work 
			its because i hate my job hate my job hate my job its because i hate my job more than anything else 
			No its cause you have no life have no life have no life and you better go get one after forwarding this crap\"
			using \"cellos\"" ;;
		
		7)	echo -e "${echoUnderline}Hidden Messages${echoNoUnderline}\n"
			osascript -e 'tell application "insert app here" to display dialog "insert line here"' ;;
		
		8)
			echo -e "${echoUnderline}dd Updater${echoNoUnderline}\n"
			osascript -e 'tell app "Terminal" to do script "echo -e \"Open a new window (or if one opened, use this window) and execute your (dd) command.\""'
			watch -n 1 pkill -SIGINFO "^dd$"
			;;
		9)
			echo -e
			smc -f
			fandone=0;
			while [ $fandone -ne 1 ]; do { FanPgrm; } done
			unset fandone
			;;

		10) BrightnessFn; ;;
		
		11)
			echo -e "${echoUnderline}File Executable Test${echoNoUnderline}\n"
			while [ -z $readpath ]; do {
				if [ $bashversion -ge 4 ]; then { ls --color=always; }
				else { ls; }
				fi
				read -p "Please choose a file to test: " -e readpath
			} done
			echo -e $readpath
			if [ -x "$readpath" ]; then { echo "File '$readpath' is executable"; }
			else { echo "File '$readpath' is not executable or not found"; }
			fi 
			unset readpath ;;
		99)
			PrintDetailedHelp;
			ReturnToMenu;
			;;

		[qQ] | [qQ][uU][iI][tT] | [eE][xX][iI][tT] ) Leave; ;;

		*)	ReturnToMenu; ;;
	esac
	sleep 1.75
	ReturnToMenu;
}


if [ "$1" == "--help" ]; then PrintHelp; PrintDetailedHelp; Leave; fi
if [ "$1" == "--version" ]; then echo -e "Version $version"; Leave; fi

#actual flow here
PrintMenuOptions;
MainSelection;